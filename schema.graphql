type ERC20 @entity {
  id: ID!
  symbol: String!
  name: String!
  decimals: Int!
}

type OToken @entity {
  id: ID!
  name: String!
  symbol: String!
  decimals: Int!
  strikeAsset: ERC20! # address
  underlyingAsset: ERC20! # address
  collateralAsset: ERC20! # address
  creator: Bytes! # address
  
  strikePrice: BigInt!
  expiryTimestamp: BigInt!
  isPut: Boolean!

  createdAt: BigInt!
  createdTx: Bytes!

  totalSupply: BigInt!
}

type Account @entity {
  id: ID!

  "Amount of vaults this account has"
  vaultCount: BigInt!

  "Array of all vaults"
  vaults: [Vault!]! @derivedFrom(field: "owner")

  "Amount of operators"
  operatorCount: BigInt!

  "Array of operator this account has"
  operators: [AccountOperator!]! @derivedFrom(field: "account")

  "Balances"
  balances: [AccountBalance!]! @derivedFrom(field: "account")
}

type Operator @entity {
  id: ID!

  "Amount of account this operator is controlling"
  accountCount: BigInt!

  "Array of accounts this operator is controlling"
  accounts: [AccountOperator!]! @derivedFrom(field: "operator")
}

# For manage many-to-many relationship between operators and accounts
type AccountOperator @entity {
  " Equals to ${account}-${operator}`"
  id: ID!
  account: Account
  operator: Operator
}

type AccountBalance @entity {
  " Equals to ${account}-${otoken}"
  id: ID!
  account: Account!
  token: OToken!
  balance: BigInt!
}

type Vault @entity {
  "Equals to <owner>-<vaultId>"
  id: ID!

  owner: Account! # address
  vaultId: BigInt!

  shortOToken: OToken # address
  longOToken: OToken # address
  collateralAsset: ERC20 # address
  
  shortAmount: BigInt
  longAmount: BigInt
  collateralAmount: BigInt
}

#
# Vault Events
#
interface VaultAction {
  " Equals to: <actionType>-<transactionHash>-<logId>"
  id: ID!
  " Transaction sender, either account or operator"
  messageSender: Bytes!
  " The vault that this action operates on"
  vault: Vault!
  " Block number "
  block: BigInt!
  " Transaction hash (tx) "
  transactionHash: Bytes!
  " Timestamp as seconds (time) "
  timestamp: BigInt!
}

type OpenVaultAction implements VaultAction @entity {
    # Vault fields
  id: ID!
  messageSender: Bytes!
  vault: Vault!
  block: BigInt!
  transactionHash: Bytes!
  timestamp: BigInt!
}

type DepositCollateralAction implements VaultAction @entity {
  # Vault fields
  id: ID!
  messageSender: Bytes!
  vault: Vault!
  block: BigInt!
  transactionHash: Bytes!
  timestamp: BigInt!
  
  # Specific field
  " Collateral sender, either account or operator"
  from: Bytes!
  " Collateral Asset"
  asset: ERC20!
  " Amount added in the vault"
  amount: BigInt!
}

type WithdrawCollateralAction implements VaultAction @entity {
    # Vault fields
  id: ID!
  messageSender: Bytes!
  vault: Vault!
  block: BigInt!
  transactionHash: Bytes!
  timestamp: BigInt!
  
  " Collateral sender, either account or operator"
  to: Bytes!
  " Collateral Asset"
  asset: ERC20!
  " Amount added in the vault"
  amount: BigInt!
}

type DepositLongAction implements VaultAction @entity {
  # Vault fields
  id: ID!
  messageSender: Bytes!
  vault: Vault!
  block: BigInt!
  transactionHash: Bytes!
  timestamp: BigInt!
  
  # Specific field
  " oToken sender, either account or operator"
  from: Bytes!
  " oToken Asset"
  oToken: OToken!
  " oToken added in the vault"
  amount: BigInt!
}

type WithdrawLongAction implements VaultAction @entity {
    # Vault fields
  id: ID!
  messageSender: Bytes!
  vault: Vault!
  block: BigInt!
  transactionHash: Bytes!
  timestamp: BigInt!
  
  " Long oToken sender, either account or operator"
  to: Bytes!
  " Long oToken Asset"
  oToken: OToken!
  " Amount added in the vault"
  amount: BigInt!
}

type BurnShortAction implements VaultAction @entity {
  # Vault fields
  id: ID!
  messageSender: Bytes!
  vault: Vault!
  block: BigInt!
  transactionHash: Bytes!
  timestamp: BigInt!
  
  # Specific field
  " oToken holder, either account or operator"
  from: Bytes!
  " oToken Asset"
  oToken: OToken!
  " Amount added in the vault"
  amount: BigInt!
}

type MintShortAction implements VaultAction @entity {
    # Vault fields
  id: ID!
  messageSender: Bytes!
  vault: Vault!
  block: BigInt!
  transactionHash: Bytes!
  timestamp: BigInt!
  
  " Create oToken to"
  to: Bytes!
  " OToken asset"
  oToken: OToken!
  " Amount added in the vault"
  amount: BigInt!
}

type SettleAction implements VaultAction @entity {
  # Vault fields
  id: ID!
  messageSender: Bytes!
  vault: Vault!
  block: BigInt!
  transactionHash: Bytes!
  timestamp: BigInt!

  "the asset that payout was denominated in. (Should be the collateral of the token)"
  payoutAsset: ERC20!
  
  " Payout to to"
  to: Bytes!
  " Short otoken of the vault. (Could be long token when there's no short)"
  oToken: OToken!
  " Amount payout"
  amount: BigInt!
}

type RedeemAction @entity {
  "REDEEM-TxHash-logIndex" 
  id: ID!

  block: BigInt!
  transactionHash: Bytes!
  timestamp: BigInt!

  "the account that call _redeem"
  messageSender: Bytes!

  "the otoken to redeem"
  oToken: OToken!

  "amount of oToken burned"
  otokenBurned: BigInt!

  "the asset that payout was denominated in. (Should be the collateral of the token)"
  payoutAsset: ERC20!

  payoutAmount: BigInt!

  "the payout goes to"
  receiver: Bytes!

}

type WhitelistedProduct @entity {
  id: ID!
  underlying: ERC20!
  strike: ERC20!
  collateral: ERC20!
  isPut: Boolean!
  isWhitelisted: Boolean!  
}

type Controller @entity {
  id: ID!
  addressBook: Bytes!
  partialPauser: Bytes!
  fullPauser: Bytes!
  owner: Bytes!

  systemPartiallyPaused: Boolean!
  systemFullyPaused: Boolean!
  callRestricted: Boolean!
}

type Oracle @entity {
  id: ID!
  
  disputer: Bytes!
}

type OracleAsset @entity {
  "the address of the asset"
  id: ID!
  
  asset: ERC20!

  "pricer for the asset"
  pricer: OraclePricer!

  prices: [ExpiryPrice!]! @derivedFrom(field: "asset")
}

type OraclePricer @entity {
  "address of the pricer"
  id: ID!

  "locking period for this pricer"
  lockingPeriod: BigInt!

  "disput period for this pricer"
  disputePeriod: BigInt!

}

type ExpiryPrice @entity {
   "asset-expiry"
   id: ID!

   "the asset"
   asset: OracleAsset!

   "timestamp"
   expiry: BigInt!

  # "the transaction hash"
   reportedTx: Bytes!

   "timestamp reported by pricer"
   reportedTimestamp: BigInt!

   "price in USD sacled by 1e8"
   price: BigInt!

   "if the price is overrided by the disputer"
   isDisputed: Boolean!
}

type FillOrder @entity {
  id: ID!
  timestamp: BigInt!

  transactionHash: Bytes!

  makerAddress: Bytes!
  takerAddress: Bytes!
  senderAddress: Bytes!
  makerAssetAmount: BigInt!
  takerAssetAmount: BigInt!

  "0x protocol fee, denominated in eth"
  protocolFeePaid: BigInt!
  
  "maker asset data"
  makerAssetData: String!

  "taker asset data"
  takerAssetData: String!

  "taker asset address"
  takerAsset: String!

  "maker asset address"
  makerAsset: String!
}